// url: https://leetcode.com/problems/find-the-key-of-the-numbers/
// You are given three positive integers num1, num2, and num3.

// The key of num1, num2, and num3 is defined as a four-digit number such that:

//     Initially, if any number has less than four digits, it is padded with leading zeros.
//     The ith digit (1 <= i <= 4) of the key is generated by taking the smallest digit among the ith digits of num1, num2, and num3.

// Return the key of the three numbers without leading zeros (if any).
/**
 * @param {number} num1
 * @param {number} num2
 * @param {number} num3
 * @return {number}
 */
function generateKey(num1, num2, num3){
    // initialize a multiplier at 1000
    let multi = 1000;
    // initialize a key
    let key = 0;
    // loop through the numbers 4 times
    for(let i = 0; i < 4; i++){
        // multiply-assign the key by 10
        key *= 10;
        // find the smallest quotient (rounded down) of the numbers divided by the multiplier
        let q1 = Math.trunc(num1 / multi);
        let q2 = Math.trunc(num2 / multi);
        let q3 = Math.trunc(num3 / multi);
        // make the smallest quotient the new digit that gets added to the key
        const min = Math.min(q1,q2,q3);
        key += min;
        // make a new assignment for each number subtracting their quotient by  by multiplier
        num1 -= q1 * multi;
        num2 -= q2 * multi;
        num3 -= q3 * multi;
        // assign the multiplier by dividing itself by 10
        multi /= 10;
    }
    // return the newly made key
    return key;
};
// console.log(generateKey(1,10,1000), 0);
// console.log(generateKey(987,879,798), 777);
// console.log(generateKey(1,2,3), 1);