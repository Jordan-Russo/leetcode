// url: https://leetcode.com/problems/merge-two-binary-trees/submissions/1439459617/
/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root1
 * @param {TreeNode} root2
 * @return {TreeNode}
 */
// given two binary trees
  // trees can be empty

// return a new tree generated by merging both of them

function mergeTrees(root1, root2){
  if(!root1 && !root2){return null}
  const mergedRoot = makeNode()

  function recursiveMerge(tree1,tree2,mergeTree){
    // add values to the mergeNode
    mergeTree.val = (tree1?.val || 0) + (tree2?.val || 0)
    // if left exists(if it exists in tree1 or tree2)
    if(tree1?.left || tree2?.left){
      // call function with all the left points
      mergeTree.left = makeNode()
      recursiveMerge(tree1?.left, tree2?.left, mergeTree.left)
    }
    if(tree1?.right || tree2?.right){
      // call function with all the left points
      mergeTree.right = makeNode()
      recursiveMerge(tree1?.right, tree2?.right, mergeTree.right)
    }
    // if right exists(if it exists in tree1 or tree2)
      // call function with all the right points
    return mergeTree
  }
  return recursiveMerge(root1,root2,mergedRoot)
}

function makeNode(val){
  return {left: null, right: null, val}
}